from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from  aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from  aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import asyncio



api = '7632744670:AAGumjd0yzpeGgXr9Zgi5R55tv1EYhC1OB0'
bot = Bot(token=api)
dp = Dispatcher(bot, storage=MemoryStorage())

kb_inline = InlineKeyboardMarkup()
but_Inlait = InlineKeyboardButton(text='–†–∞—Å—Å—á–∏—Ç–∞—Ç—å', callback_data ='calories')
but_1_Inlait = InlineKeyboardButton(text='–§–æ—Ä–º—É–ª—ã —Ä–∞—Å—á—ë—Ç–∞', callback_data ='formulas')
kb_inline.row(but_Inlait, but_1_Inlait)

kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
kb_pol = types.ReplyKeyboardMarkup(resize_keyboard=True)
kb_otz = types.ReplyKeyboardMarkup(resize_keyboard=True)
button_1 = KeyboardButton(text = '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å')
button = KeyboardButton(text = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
button_2 = KeyboardButton(text = '–ú—É–∂—á–∏–Ω–∞')
button_3 = KeyboardButton(text = '–ñ–µ–Ω—â–∏–Ω–∞')
but = KeyboardButton(text='min –æ—Ü–µ–Ω–∫–∞')
but_1 = KeyboardButton(text='max –æ—Ü–µ–Ω–∫–∞')
kb.row(button_1, button)
kb_pol.row(button_2, button_3)
kb_otz.row(but, but_1)

class UserState(StatesGroup):
    age = State()
    growth = State()
    weight = State()
    pol = State()

@dp.message_handler(text=['–†–∞—Å—Å—á–∏—Ç–∞—Ç—å'])
async def main_menu(message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', reply_markup = kb_inline)

@dp.callback_query_handler(text = ['formulas'])
async  def get_formulas(call):
    await  call.message.answer(' –¥–ª—è –º—É–∂—á–∏–Ω: 10 —Ö –≤–µ—Å (–∫–≥) + 6,25 x —Ä–æ—Å—Ç (—Å–º) ‚Äì 5 —Ö –≤–æ–∑—Ä–∞—Å—Ç (–≥) + 5 \n '
                               '–¥–ª—è –∂–µ–Ω—â–∏–Ω: 10 x –≤–µ—Å (–∫–≥) + 6,25 x —Ä–æ—Å—Ç (—Å–º) ‚Äì 5 x –≤–æ–∑—Ä–∞—Å—Ç (–≥) ‚Äì 161 ')
    await call.answer()



@dp.callback_query_handler(text=['calories'])
async  def set_age(call):
    await  call.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:')
    await UserState.age.set()

@dp.message_handler(state=UserState.age)
async def set_growth(message, state):
    await state.update_data(fir_age = message.text)
    data = await state.get_data()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç:')
    await UserState.growth.set()

@dp.message_handler(state=UserState.growth)
async def set_weight(message, state):
    await state.update_data(fir_growth = message.text)
    data = await state.get_data()
    await  message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å:')
    await  UserState.weight.set()

@dp.message_handler(state=UserState.weight)
async def send_calories(message, state):
    await state.update_data(fir_weight = message.text)
    data = await state.get_data()
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª:', reply_markup = kb_pol)
    await UserState.pol.set()


@dp.message_handler(state=UserState.pol)
async def send_calories_g(message,state):
    await state.update_data(fir_pol=message.text)
    data = await state.get_data()
    if data['fir_pol'] == '–ñ–µ–Ω—â–∏–Ω–∞':
        x = -161
    else:
        x = 5
    callori = ((10 * float(data['fir_weight'])) + (6.25 * float(data['fir_growth'])) - (4.92 * float(data['fir_age']))) + x
    await message.answer(f'–í–∞—à–∞ –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {callori}')
    await message.answer('–£–≤–∞–∂–∞–µ–º—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å, —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –ø—Ä–∏—à–ª–æ—Å—å –Ω–µ–º–Ω–æ–≥–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –º–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª, '
                         '–∏–±–æ –º–æ—è –º–∏—Å—Å–∏—è –ø–æ–º–æ–≥–∞—Ç—å –≤—Å–µ–º, –ù–ï–ó–ê–í–ò–°–ò–ú–û –û–¢ –ò–• –ü–û–õ–û–ñ–ï–ù–ò–Ø ', reply_markup = kb_otz )
    await asyncio.sleep(1)
    await message.answer('–û—Ü–µ–Ω–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –º–æ—é —Ä–∞–±–æ—Ç—É, —è —É–≤–µ—Ä–µ–Ω –æ—Ü–µ–Ω–∫–∞ –±—É–¥–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π', reply_markup=kb_otz)
    await state.finish()

@dp.message_handler(text = ['min –æ—Ü–µ–Ω–∫–∞', 'max –æ—Ü–µ–Ω–∫–∞'])
async def otzv(message):
    await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É üòÇ')



@dp.message_handler(commands=['start'])
async def start_message(message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–º–æ–≥–∞—é—â–∏–π —Ç–≤–æ–µ–º—É –∑–¥–æ—Ä–æ–≤—å—é.', reply_markup = kb)

@dp.message_handler()
async def all_message(message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.')

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)